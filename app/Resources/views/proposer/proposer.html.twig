{% extends 'base.html.twig' %}

{% block title %}carte{% endblock %}
{% block stylesheets %}
<meta name="viewport" content="initial-scale=1.0">
<style>
html, body {
  height: 100%;
  margin: 0;
  padding: 0;
}
#map {
  height: 100%;
}
</style>
<link rel="stylesheet" type="text/css" media="screen"
href="{{asset('css/index/bootstrap-datetimepicker.css')}}">
{% endblock %}
{% block body %}
<div class="content-section-b">
  <div class="container">
    <div class="row">
      <div class="col-md-6">
        <div class="container-fluid">
          <form>
            <h2 class="section-heading">Itinéraire</h2>
            <div class="form-group row">
              <div class="col-md-10">
                <div class="input-group">
                  <span class="input-group-addon">
                    <span class="glyphicon glyphicon-screenshot"></span>
                  </span>
                  <input type="text" class="form-control" placeholder="Départ" id="depart">
                </div>
              </div>
            </div>
            <div class="form-group row">
              <div class="col-md-10">
                <div class="input-group">
                  <span class="input-group-addon">
                    <span class="glyphicon glyphicon-screenshot"></span>
                  </span>
                  <input type="text" class="form-control" placeholder="Destination" id="destination">
                </div>
              </div>
            </div>
            <h2 class="section-heading">Date & Horaire</h2>
            <div class="form-group row">
              <div class="col-sm-5">
                <div class='input-group' >
                  <span class="input-group-addon">
                    <span class="glyphicon glyphicon-calendar"></span>
                  </span>
                  <input type='text' class="form-control" id='datetimepicker' />
                </div>
              </div>
              <div class="col-sm-2">
                <select class="form-control" id="heure">
                  <option value="0">0</option>
                  <option value="1">1</option>
                  <option value="2">2</option>
                  <option value="3">3</option>
                  <option value="4">4</option>
                  <option value="5">5</option>
                  <option value="6">6</option>
                  <option value="7">7</option>
                  <option value="8">8</option>
                  <option value="9">9</option>
                  <option value="10">10</option>
                  <option value="11">11</option>
                  <option value="12">12</option>
                  <option value="13">13</option>
                  <option value="14">14</option>
                  <option value="15">15</option>
                  <option value="16">16</option>
                  <option value="17">17</option>
                  <option value="18">18</option>
                  <option value="19">19</option>
                  <option value="20">20</option>
                  <option value="21">21</option>
                  <option value="22">22</option>
                  <option value="23">23</option>
                </select>
              </div>
              <div class="col-sm-1">
                <h5> h </h5>
              </div>
              <div class="col-sm-2">
                <select class="form-control" id="minutes">
                  <option value="00">00</option>
                  <option value="10">10</option>
                  <option value="20">20</option>
                  <option value="30">30</option>
                  <option value="40">40</option>
                  <option value="50">50</option>
                </select>
              </div>
              <div class="col-sm-1">
                <h5> min </h5>
              </div>
            </div>
            <button type="submit" class="btn btn-primary">Continuer</button>
          </form>
        </div>
      </div>
      <div class="col-md-6">
        <h2 class="section-heading">Trajet</h2>
        <div id="map" style="width:400px;height:400px;"></div>
      </div>
    </div>
  </div>
</div>

{% endblock %}
{% block javascripts %}
<script>
function initMap() {
  var origin_place_id = null;
  var destination_place_id = null;
  var waypoint_place_id = null;
  var travel_mode = google.maps.TravelMode.DRIVING;
  var map = new google.maps.Map(document.getElementById('map'), {
    center: {lat: 48.85, lng: 2.35},
    zoom: 5
  });
  var directionsService = new google.maps.DirectionsService;
  var directionsDisplay = new google.maps.DirectionsRenderer;
  directionsDisplay.setMap(map);

  var origin_input = document.getElementById('depart');
  var destination_input = document.getElementById('destination');
  var waypoint_input = document.getElementById('etape');

  var origin_autocomplete = new google.maps.places.Autocomplete(origin_input);
  origin_autocomplete.bindTo('bounds', map);
  var destination_autocomplete = new google.maps.places.Autocomplete(destination_input);
  destination_autocomplete.bindTo('bounds', map);
  //var waypoint_autocomplete = new google.maps.places.Autocomplete(waypoint_input);

  var infowindow = new google.maps.InfoWindow();
  var marker = new google.maps.Marker({
    map: map,
    anchorPoint: new google.maps.Point(0, -29)
  });

  function expandViewportToFitPlace(map, place) {
    if (place.geometry.viewport) {
      map.setCenter(place.geometry.location);
      map.setZoom(8);
    } else {
      map.setCenter(place.geometry.location);
      map.setZoom(8);
    }
  }

  origin_autocomplete.addListener('place_changed', function() {
    var place = origin_autocomplete.getPlace();
    if (!place.geometry) {
      window.alert("Autocomplete's returned place contains no geometry");
      return;
    }
    expandViewportToFitPlace(map, place);

    // If the place has a geometry, store its place ID and route if we have
    // the other place ID
    origin_place_id = place.place_id;
    route(origin_place_id, destination_place_id, waypoint_place_id ,travel_mode,
      directionsService, directionsDisplay);
    });

    destination_autocomplete.addListener('place_changed', function() {
      var place = destination_autocomplete.getPlace();
      if (!place.geometry) {
        window.alert("Autocomplete's returned place contains no geometry");
        return;
      }
      expandViewportToFitPlace(map, place);

      // If the place has a geometry, store its place ID and route if we have
      // the other place ID
      destination_place_id = place.place_id;
      route(origin_place_id, destination_place_id, waypoint_place_id ,travel_mode,
        directionsService, directionsDisplay);
      });

      /*waypoint_autocomplete.addListener('place_changed', function() {
      var place = waypoint_autocomplete.getPlace();
      if (!place.geometry) {
      window.alert("Autocomplete's returned place contains no geometry");
      return;
    }
    expandViewportToFitPlace(map, place);
    // If the place has a geometry, store its place ID and route if we have
    // the other place ID
    waypoint_place_id = place.place_id;
    route(origin_place_id, destination_place_id, waypoint_place_id ,travel_mode,
    directionsService, directionsDisplay);
  });*/

  function route(origin_place_id, destination_place_id, waypoint_place_id, travel_mode,
    directionsService, directionsDisplay) {
      if (!origin_place_id || !destination_place_id) {
        return;
      }else {
        if (!waypoint_place_id) {
          directionsService.route({
            origin: {'placeId': origin_place_id},
            destination: {'placeId': destination_place_id},
            travelMode: travel_mode
          }, function(response, status) {
            if (status === google.maps.DirectionsStatus.OK) {
              directionsDisplay.setDirections(response);
            } else {
              window.alert('Directions request failed due to ' + status);
            }
          });
        }
        else {
          var wpnt=[];
          wpnt.push({
            location:{'placeId':waypoint_place_id},
            stopover:true
          });
          directionsService.route({
            origin: {'placeId': origin_place_id},
            destination: {'placeId': destination_place_id},
            waypoints : wpnt,
            travelMode: travel_mode
          }, function(response, status) {
            if (status === google.maps.DirectionsStatus.OK) {
              directionsDisplay.setDirections(response);
            } else {
              window.alert('Directions request failed due to ' + status);
            }
          });
        }
      }
    }
  }
  </script>
  <script src="https://maps.googleapis.com/maps/api/js?key=AIzaSyD3z3kJLlB-90weDg5R5M-ufw61cRMpvRE&signed_in=true&libraries=places&callback=initMap"
  async defer></script>
  <script type="text/javascript"
  src="{{ asset('js/index/moment.js') }}">
  </script>
  <script type="text/javascript"
  src="{{ asset('js/index/fr.js') }}">
  </script>
  <script type="text/javascript"
  src="{{ asset('js/index/bootstrap-datetimepicker.js') }}">
  </script>
  <script type="text/javascript">
  $(function () {
    $('#datetimepicker').datetimepicker({
      minDate: new Date(),
      format: 'DD/MM/YYYY'
    });

  });
  </script>
  {% endblock %}
